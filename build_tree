#!/usr/bin/env bash
# Usage: this_script [source dir] [destination dir]
shopt -s nocasematch
shopt -s nocaseglob
set -e

JOBS=4

DATE="$(which gdate 2>/dev/null || which date)"
SPLIT="$(which gsplit 2>/dev/null || which split)"
TOUCH="$(which gtouch 2>/dev/null || which touch)"
FIND="$(which gfind 2>/dev/null || which find)"
SED="$(which gsed 2>/dev/null || which sed)"

if ! grep 'GNU coreutils' < <(strings "$DATE") >/dev/null
then
	echo "GNU date not found. Please install GNU coreutils first."
	exit 1
fi

if ! grep 'GNU coreutils' < <(strings "$SPLIT") >/dev/null
then
	echo "GNU split not found. Please install GNU coreutils first."
	exit 1
fi

if ! grep 'GNU coreutils' < <(strings "$TOUCH") >/dev/null
then
	echo "GNU touch not found. Please install GNU coreutils first."
	exit 1
fi

if ! grep 'GNU findutils' < <(strings "$FIND") >/dev/null
then
	echo "GNU find not found. Please install GNU findutils first."
	exit 1
fi

if ! grep 'GNU sed' < <(strings "$SED") >/dev/null
then
	echo "GNU sed not found. Please install it first."
	exit 1
fi

if ! which openssl >/dev/null 2>&1
then
	echo "OpenSSL not found. Please install it first."
	exit 1
fi

if ! which exiftool >/dev/null 2>&1
then
	echo "ExitTool not found. Please download it from http://www.sno.phy.queensu.ca/~phil/exiftool/ and install it first."
	exit 1
fi

UNSORTED=$(cd "${1:-.}"; pwd)
DEST_ROOT=$(D="${2:-.}"; mkdir -p "$D"; cd "$D"; pwd)

echo "Will merge $UNSORTED"
echo "Into tree at $DEST_ROOT"

if [ "$UNSORTED" == "$DEST_ROOT" ]
then
	echo >&2 "Source and destination directories cannot be the same."
	echo >&2 "Usage: $0 [source dir (default:.)] [destination dir (default:.)]"
	exit 1
fi

declare -a BOO_FILES

sig_handler() {
	local RC=$? SIG=$1
	if [ "$RC" == "0" ] && [ "$SIG" == "EXIT" ]
	then
		echo OK
	else
		echo "Exited with status $RC"
	fi
	# TODO: tmp files cleaning
	kill -s ${SIG/INT/KILL} 0
}

for sig in INT TERM EXIT
do
	trap "sig_handler $sig" $sig
done

function worker() {
	local func=$1 J="$2"
	local FN
	while IFS= read -r -d '' FN
	do
		local DIR="${FN%/*}"; DIR="${DIR:2}"
		local BASE="${FN##*/}"

		$func "${DIR:-.}" "$BASE"
	done < <(tr '\n' '\0' <"$J")
}

function manager() {
	local J=$(mktemp -d -t boo)
	"$SPLIT" \
		--number="r/$JOBS" \
		--elide-empty-files \
		--numeric-suffixes=1 \
		--suffix-length=1 \
		- "${J}/boo." \
		< <("$FIND" -O3 . -path ./.state -prune -o -regextype posix-extended -type f -readable -iregex '.*\.(3gp|avi|mpeg|mpg|mp2|m2v|m4v|mp4|jpg|mov|nef|png)' -print)

	local -a pid
	local N
	local func=$1

	for (( N=1; N<=$JOBS; ++N ))
	do
		if [ -f "${J}/boo.$N" ]
		then
			worker $func "${J}/boo.$N" &
			pid[${#pid[*]}]=$!
		fi
	done
	wait ${pid[@]}
	rm -rf "$J"
}

function update_state() {
	local DIR="$1" BASE="$2"
	local FN="$DIR/$BASE"

	[ -d ".state/refs/$DIR" ] || mkdir -p ".state/refs/$DIR"
	if [ ! -f ".state/refs/$FN" ]
	then
		echo "Found $FN"
		local SIG=$(openssl dgst -ripemd160 "$FN")
		SIG=${SIG/*= /}
		echo -n "$DIR/$BASE" > ".state/hashs/$SIG"
		echo -n $SIG > ".state/refs/$FN"
	fi
}

function process_file() {
	local DIR="$1" BASE="$2"
	local FN="$DIR/$BASE"
	local EXT="${BASE##*.}"

	# Build signature (using the original file)
	local SIG=$(openssl dgst -ripemd160 "$FN")
	SIG=${SIG/*= /}
	if [ -f "${DEST_ROOT}/.state/hashs/$SIG" ]
	then
		local DUPE="$(cat "${DEST_ROOT}/.state/hashs/$SIG" || true)"
		echo "$DIR/$BASE == ${DEST_ROOT}/$DUPE"
		if [ ! -z "$DUPE" ] && [ -f "${DEST_ROOT}/$DUPE" ]
		then
			rm "$FN"
			return 0
		fi
	fi

	# MPG files sometimes have a companion THM file holding the metadata
	local F2="$FN"
	if [ -f "${FN%.*}.THM" ] && [ "${EXT^^}" == "MPG" ]
	then
		F2="${FN%.*}.THM"
	fi

	# EXIF
	local LINE
	unset TAGS
	local -A TAGS
	while read -r LINE
	do
		TAGS["${LINE%%=*}"]="${LINE#*=}"
	done < <(exiftool -S -d '%Y-%m-%dT%H:%M:%S%z' -DateTimeOriginal -MediaCreateDate -MediaModifyDate -TrackCreateDate -TrackModifyDate -Creationdate -CreateDate -ModifyDate -FileModifyDate "$F2" | "$SED" -e 's#\([^:]\+\): *\(.*\)#\1=\2#g' -e 's#^\([^=]\+\)=\(.\+[^-+]....\)$#\1=\2+0900#g')

	local D=""
	for T in CreateDate Creationdate DateTimeOriginal ModifyDate MediaCreateDate MediaModifyDate TrackCreateDate TrackModifyDate FileModifyDate
	do
		if [ ! -z "${TAGS[$T]}" ]
		then
			D="$("$DATE" -ud "${TAGS[$T]}" +'%Y/%m/%d' 2>/dev/null || true)"
			if [ ! -z "$D" ]
			then
				break
			fi
		fi
	done

	if [ -z "$D" ]
	then
		echo >&2 "Unable to find EXIF date for $F2 (skipping)"
		continue
	fi

	mkdir -p "${DEST_ROOT}/$D"
	local BASE2="$BASE"
	while [ -f "${DEST_ROOT}/$D/$BASE2" ]
	do
		# Names might collide if multiple cameras were used
		BASE2="${BASE2%.*}_.$EXT"
	done

	local NEW_FN="${DEST_ROOT}/$D/$BASE2"
	mv -v "$FN" "$NEW_FN"
	chown "$USER" "$NEW_FN"
	chmod 644 "$NEW_FN"
	"$TOUCH" -d "$Z" "$NEW_FN"

	[ -d "${DEST_ROOT}/.state/refs/$D" ] || mkdir -p "${DEST_ROOT}/.state/refs/$D"
	echo -n "$D/$BASE2" > "${DEST_ROOT}/.state/hashs/$SIG"
	echo -n $SIG > "${DEST_ROOT}/.state/refs/$D/$BASE2"
}

echo "* Updating state folder... "
cd "$DEST_ROOT"
mkdir -p ".state"/{refs,hashs}
manager update_state

echo
echo "* Merging $UNSORTED"
cd "$UNSORTED"
manager process_file

echo "Done!"
